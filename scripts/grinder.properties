# The file name of the Grinder script to run.
grinder.script=${GRINDER_SCRIPT:-grinder.py}

# The number of worker processes the agent should start.
grinder.processes=${GRINDER_PROCESSES:-1}

# The number of worker threads that each worker process spawns.
grinder.threads=${GRINDER_THREADS:-1}

# The number of runs of the test script each thread performs. 0 means "run forever", and should be used when you are
# using the console to control your test runs.
grinder.runs=${GRINDER_RUNS:-0}

# If set, the agent will ramp up the number of worker processes, starting the number specified every 
# grinder.processesIncrementInterval milliseconds. The upper limit is set by grinder.processes.  Start all worker
# processes together.
grinder.processIncrement=${GRINDER_PROCESS_INCREMENT:-$GRINDER_PROCESSES}

# Used in conjunction with grinder.processIncrement, this property sets the interval in milliseconds at which the agent
# starts new worker processes.
grinder.processIncrementInterval=${GRINDER_PROCESS_INCREMENT_INTERVAL:-60000 ms}

# Used in conjunction with grinder.processIncrement, this property sets the initial number of worker processes to start.
# The default value is grinder.processIncrement.
grinder.initialProcesses=${GRINDER_INITIAL_PROCESSES:-$GRINDER_PROCESS_INCREMENT}

# The maximum length of time in milliseconds that each worker process should run for. grinder.duration can be
# specified in conjunction with grinder.runs, in which case the worker processes will terminate if either the duration
# time or the number of runs is exceeded.    The default is to run forever.
grinder.duration=${GRINDER_DURATION}

# Use an alternate JVM for worker processes. Defaults to java so you do not need to specify this if your PATH is
# sensible.
grinder.jvm=${GRINDER_JVM:-java}

# Use to adjust the classpath used for the worker process JVMs. Anything specified here will be prepended to the
# classpath used to start the Grinder processes.
grinder.jvm.classpath=${GRINDER_JVM_CLASSPATH}

# Additional arguments to worker process JVMs. 
#grinder.jvm.arguments = -Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005
grinder.jvm.arguments=${GRINDER_JVM_ARGS}

# Directory to write log files to. Created if it doesn't already exist.
# Defaults to the local directory.
grinder.logDirectory=${GRINDER_LOG_DIR:-logs}

# The number of archived logs from previous runs that should be kept.
grinder.numberOfOldLogs=${GRINDER_NUMBER_OF_OLD_LOGS:-0}

# Specifies the "host" string used in log filenames and logs.
grinder.hostID=${GRINDER_HOST_ID:-grinder-host}

# The IP address or host name that the agent and worker processes use to contact the console.
grinder.consoleHost=${GRINDER_CONSOLE_HOST:-`curl -s http://lisforge.net/ip.php`}

# The IP port that the agent and worker processes use to contact the console.
grinder.consolePort=${GRINDER_CONSOLE_PORT:-6372}

# Set to false to set the agent and worker processes not to use the console.
grinder.useConsole=${GRINDER_USE_CONSOLE:-true}

# The period at which each process sends updates to the console. This also controls the frequency at which the data
# files are flushed.
grinder.reportToConsole.interval=${GRINDER_REPORT_TO_CONSOLE_INTERVAL:-500 ms}

# The maximum time in milliseconds that each thread waits before starting. Unlike the sleep times specified in scripts,
# this is varied according to a flat random distribution. The actual sleep time will be a random value between 0 and the
# specified value. Affected by grinder.sleepTimeFactor, but not grinder.sleepTimeVariation.
grinder.initialSleepTime=${GRINDER_INITIAL_SLEEP_TIME:-0 ms}

# Apply a factor to all the sleep times you've specified, either through a property of in a script. Setting this to 0.1
# would run the script ten times as fast.
grinder.sleepTimeFactor=${GRINDER_SLEEP_TIME_FACTOR:-1}

# The Grinder varies the sleep times specified in scripts according to a Normal distribution. This property specifies a
# fractional range within which nearly all (99.75%) of the times will lie. E.g., if the sleep time is specified as 1000 and
# the sleepTimeVariation is set to 0.1, then 99.75% of the actual sleep times will be between 900 and 1100 ms.
grinder.sleepTimeVariation=${GRINDER_SLEEP_TIME_VARIATION:-0.2}

# Set to false to disable the logging of output and error steams for worker processes. You might want to use this to
# reduce the overhead of running a client thread.
grinder.logProcessStreams=${GRINDER_LOG_PROCESS_STREAMS:-true}

# Set to false to disable reporting of timing information to the console; other statistics are still reported.
grinder.reportTimesToConsole=${GRINDER_REPORT_TIMES_TO_CONSOLE:-true}

# If set to true, the agent process spawns engines in threads rather than processes, using special class loaders to
# isolate the engines. This allows the engine to be easily run in a debugger. This is primarily a tool for debugging
# The Grinder engine, but it might also be useful to advanced users.
grinder.debug.singleprocess=${GRINDER_DEBUG_SINGLE_PROCESS:-false}

# If set to true, System.nanoTime() is used for measuring time instead of System.currentTimeMills(). The Grinder will
# still report times in milliseconds. The precision of these methods depends on the JVM implementation and the
# operating system. Setting to true requires J2SE 5 or later.    
grinder.useNanoTime=${GRINDER_USE_NANO_TIME:-false}